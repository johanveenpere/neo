// STATIC: "CONVERT_TO_SRGB" "0..1"	[ps20b][= g_pHardwareConfig->NeedsShaderSRGBConversion()] [PC]
// STATIC: "CONVERT_TO_SRGB" "0..0"	[= 0] [XBOX]

#define HDRTYPE HDR_TYPE_NONE
#include "common_ps_fxc.h"

sampler FBSampler	: register(s0);
sampler BlurSampler	: register(s1);

const float g_BrightnessScale : register(c0);
const float g_GreenScale : register(c1);
const float g_BrightFlatness : register(c2);
const float g_DimFlatness : register(c3);

struct PS_INPUT
{
	float2 texCoord				: TEXCOORD0;
};

float4 main( const PS_INPUT i ) : COLOR
{
	float4 cColor = tex2D(FBSampler, i.texCoord);
	
	// "Blur"
	cColor += tex2D(FBSampler, i.texCoord.xy + 0.0001);
	cColor += tex2D(FBSampler, i.texCoord.xy + 0.0002);
	cColor += tex2D(FBSampler, i.texCoord.xy + 0.0003); 
	
	if (((cColor.r + cColor.g + cColor.b) / 3) < 0.9)
	{
		cColor = cColor / g_DimFlatness;
	}
	else
	{
		cColor = cColor / g_BrightFlatness;
	}
	
	// Sets green the the average of rgb
	const float gHue = (cColor.r + cColor.g + cColor.b) / 3;
	const float rbHue = gHue / (1 + g_GreenScale);

	cColor.g = gHue;
	cColor.r = rbHue;
	cColor.b = rbHue;

	return cColor * g_BrightnessScale;
}
